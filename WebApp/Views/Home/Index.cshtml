@model WebApp.Models.Home.Index
@{
    ViewData["Title"] = WebApp.Resources.WebApp.Views.Home.Index.Title;
}

@if (Model.NowAvailable != null)
{
    <section class="banner gradient">
        <div class="container">
            <div class="align-items-center offset-1 pe-5 row">
                <div class="col-6">
                    <span>@WebApp.Resources.WebApp.Views.Home.Index.NowAvailable.ToUpper()!</span>
                    <h4>@Model.NowAvailable.Name</h4>
                    <p>@Html.Raw(string.Format(WebApp.Resources.WebApp.Views.Home.Index.NowAvailablePrice, Model.NowAvailable.Price.ToString("0.00")))€</p>
                    
                    <a asp-controller="Products" asp-action="Details" asp-route-id="@Model.NowAvailable.Id" class="btn btn-light mt-1" id="take-a-look">@WebApp.Resources.WebApp.Views.Home.Index.TakeALook</a>
                </div>
                <div class="col-6">
                    <img src="@(Model.NowAvailable.Pictures!.Count >= 1 ? Model.NowAvailable.Pictures!.First().Path : "/assets/placeholder.png")" class="float-end banner-image rounded-circle" alt="" />
                </div>
            </div>
        </div>
    </section>
    <br/>
    <br/>
}

@if (Model.BestSellers.Count >= 1)
{
    <div class="text-center">
        <h2 class="fw-light">@WebApp.Resources.WebApp.Views.Home.Index.BestSellers.ToUpper()</h2>
        <br/>

        <div class="d-flex flex-wrap justify-content-between">
            @foreach (var bestSeller in Model.BestSellers)
            {
                <div class="card mb-5" style="width: 12.5rem;">
                    <img class="p-2 card-image" src="@(bestSeller.Pictures!.Count >= 1 ? bestSeller.Pictures!.First().Path : "/assets/placeholder.png")" alt="Card image cap" />
                    <div class="card-body d-flex flex-column">
                        <h5 class="card-title mb-1"><a asp-controller="Products" asp-action="Details" asp-route-id="@bestSeller.Id" class="stretched-link text-dark text-decoration-none">@bestSeller.Name</a></h5>
                        <p class="card-text mb-auto">@bestSeller.Price.ToString("0.00")€</p>
                        @if (bestSeller.Quantity >= 1)
                        {
                            <form asp-action="AddEntry" asp-controller="Cart" class="mt-3">
                                <input type="hidden" name="ProductId" value="@(bestSeller.Id)" />
                                <input type="hidden" name="ProductName" value="@(bestSeller.Name)" />
                                <input type="hidden" name="ProductPrice" value="@(bestSeller.Price)" />
                                <input type="hidden" name="ProductQuantity" value="@(bestSeller.Quantity)" />
                                <input type="hidden" name="Quantity" value="1" />
                                <input type="hidden" name="Total" value="@(bestSeller.Price)" />

                                <input class="btn btn-dark form-control" style="position: relative; z-index: 1000;" type="submit" value="@WebApp.Resources.WebApp.Views.Home.Index.AddToCart" />
                            </form>
                        }
                        else
                        {
                            <input class="btn btn-danger form-control mt-3" style="position: relative; z-index: 1000;" type="button" value="@WebApp.Resources.WebApp.Views.Home.Index.OutOfStock" />
                        }
                        
                    </div>
                </div>
            }

            @if (Model.BestSellers.Count % 5 != 0)
            {
                for (var i = 0; i < 5 - Model.BestSellers.Count % 5; i++)
                {
                    <div style="width: 12.5rem;"></div>
                }
            }
        </div>
    </div>
}

@section Scripts
{
    <script>
        const addEntry = async (element) => {
            const response = await fetch('@(Url.Action("AddEntry", "Cart"))', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    'ProductId': element.dataset.productId,
                    'ProductName': element.dataset.productName,
                    'ProductPrice': parseFloat(element.dataset.productPrice),
                    'ProductQuantity': parseInt(element.dataset.productQuantity),
                    'Quantity': parseInt(element.dataset.quantity),
                    'Total': parseFloat(element.dataset.productPrice) * parseInt(element.dataset.quantity)
                })
            });
            
            if (!response.ok) {
                return;
            }

            const cartElement = document.getElementById('cart');
            if (cartElement === null) {
                return;
            }

            const result = await response.json();
            if (result === null) {
                return;
            }

            if (result.entries.length >= 1) {
                cartElement.innerText = '@WebApp.Resources.WebApp.Views.Shared._CartPartial.Cart (' + result.entries.length + ')';
            } else {
                cartElement.innerText = '@WebApp.Resources.WebApp.Views.Shared._CartPartial.Cart';
            }
        }
    </script>
}
