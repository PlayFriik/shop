@using Microsoft.AspNetCore.Identity
@using Microsoft.Extensions.Configuration
@using System.Text.Json
@inject IConfiguration _configuration
@inject UserManager<WebApp.Domain.Identity.AppUser> _userManager

@{
    ViewData["Title"] = WebApp.Resources.WebApp.Views.Checkout.Index.Title;
}

<section class="banner gradient pb-4 pt-4">
    <div class="container">
        <div class="row text-center">
            <h3 class="fw-light m-auto">@WebApp.Resources.WebApp.Views.Checkout.Index.Title.ToUpper()</h3>
        </div>
    </div>
</section>
<br/>

@{
    var cart = JsonSerializer.Deserialize<WebApp.BLL.DTO.Checkout.Cart>(Context.Request.Cookies["Cart"]!);

    <table class="table">
        <thead>
        <tr class="d-flex">
            <th class="col-7">@WebApp.Resources.WebApp.Views.Checkout.Index.Product</th>
            <th class="col-2 text-center">@WebApp.Resources.WebApp.Views.Checkout.Index.Quantity</th>
            <th class="col-1 text-center">@WebApp.Resources.WebApp.Views.Checkout.Index.Price</th>
            <th class="col-1 text-center">@WebApp.Resources.WebApp.Views.Checkout.Index.Total</th>
            <th class="col-1 text-center"></th>
        </tr>
        </thead>
        <tbody>

        @foreach (var entry in cart!.Entries)
        {
            <tr class="d-flex">
                <td class="col-7">@entry.ProductName</td>
                <td class="col-2 form-inline justify-content-center text-center">
                    <span class="ms-2 me-2">@entry.Quantity</span>
                </td>
                <td class="col-1 text-center">@entry.ProductPrice.ToString("0.00")€</td>
                <td class="col-1 text-center">@entry.Total.ToString("0.00")€</td>
                <td class="col-1 text-center"></td>
            </tr>
        }
        <tr class="d-flex">
            <td class="col-7">
                <strong>@WebApp.Resources.WebApp.Views.Checkout.Index.Shipping (@cart.ProviderName @cart.LocationName)</strong>
            </td>
            <td class="col-2"></td>
            <td class="col-1"></td>
            <td class="col-1 text-center">@cart.ProviderPrice.ToString("0.00")€</td>
            <td class="col-1"></td>
        </tr>
        <tr class="d-flex">
            <td class="col-7">
                <strong>@WebApp.Resources.WebApp.Views.Checkout.Index.Total</strong>
            </td>
            <td class="col-2"></td>
            <td class="col-1"></td>
            <td class="col-1 text-center" id="checkout-total">@((cart.Entries.Sum(entry => entry.Total) + cart.ProviderPrice).ToString("0.00"))€</td>
            <td class="col-1"></td>
        </tr>
        </tbody>
    </table>
    <br/>

    <div class="row g-0 text-center">
        <h4 class="fw-light mb-4">@WebApp.Resources.WebApp.Views.Checkout.Index.PayWith...</h4>
    </div>
    <div class="row g-0">
        <div class="col-4"></div>
        <div class="col-4">
            <div id="paypal-button-container"></div>
        </div>
        <div class="col-4"></div>
    </div>
    <div class="row g-0">
        <div class="col-4"></div>
        <div class="col-4 text-center">
            <span>@WebApp.Resources.WebApp.Views.Checkout.Index.YouWillBeRedirectedToPayPal</span>
        </div>
        <div class="col-4"></div>
    </div>
}

@section Scripts
{
    <script src="https://www.paypal.com/sdk/js?client-id=AXYD0e7tsGbrBv1Q6opLSWPsbI6G_RtHB2L9GE-EVC4VzfGHrxTbZLe9WISrzhJ60J0uWegA6WrCaCoQ&currency=EUR&disable-funding=card,credit"></script>
    <script>
        paypal.Buttons({
            createOrder: (data, actions) => {
                return actions.order.create({
                    purchase_units: [{
                        amount: {
                            value: @((cart.Entries.Sum(entry => entry.Total) + cart.ProviderPrice).ToString("0.00"))
                        }
                    }]
                });
            },
            onApprove: (data, actions) => {
                return actions.order.capture().then(async () => {
                    const response = await fetch('@(Url.Action("Process", "Checkout"))', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            Entries: @Html.Raw(JsonSerializer.Serialize(cart.Entries)),
                            LocationId: '@cart.LocationId',
                            LocationName: '@cart.LocationName',
                            ProviderId: '@cart.ProviderId',
                            ProviderName: '@cart.ProviderName',
                            ProviderPrice: '@cart.ProviderPrice'
                        })
                    });

                    if (!response.ok) {
                        return;
                    }

                    const result = await response.json();
                    if (result === null) {
                        return;
                    }
                    
                    window.location.replace('/Checkout/Success?orderId=' + result.id);
                });
            },
            onCancel: () => {
                window.location.replace('/Checkout/Failure');
            },
            style: {
                color: 'black',
                height: 50
            }
        }).render('#paypal-button-container'); // Display payment options on your web page
    </script>
}